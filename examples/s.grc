

fun main(): nothing

 
  fun triangle(n: int): nothing

   
    fun rule_90(ref ev: char[]): nothing

      fun is_star(c: char): int
      { $is_star
        if c = '*' then{
          
          return 1;
        }
        
        else
          return 0;
      } $is_star

     
      fun xor(x, y: int): int
      { $ xor
        
        if x = 1 and y = 0 or x = 0 and y = 1 then
          return 1;
        else 
          return 0;
      } $ xor

      var l, i,j: int;
      var s: int[2];
      var cp: char[129];
      var z:char;

    { $ rule_90
 
     writeString(ev);
      i <- 0;
      l <- 32;

      j<-0;

      while (j<32) do{
        cp[j]<-ev[j];
        j<-j+1;
      }

    

      while i < l do {
        if i - 1 < 0 then
          s[0] <- 0;
        else
          s[0] <- is_star(cp[i-1]);

        if i + 1 < l then
          s[1] <- is_star(cp[i+1]);
        else
          s[1] <- 0;

        if xor(s[0], s[1]) = 1 then {
          ev[i] <- '*';
        }
        else
          ev[i] <- ' ';

        i <- i + 1;
      }
    } $ rule_90

   
    fun ipow(x, n: int): int
    { $ ipow
      if n <= 0 then
        return 1;
      else
        return x * ipow(x, n-1);
    } $ ipow

    fun round2(n: int): int
    { $round2
      if n mod 2 = 1 then 
        return n div 2 + 1;
      else 
        return n div 2;
    } $round2
  
    var i, l: int;
    var row: char[129];
    
  { $triangle
    i <- 0;
    l <- ipow(2, n+1); $ length of the rows

    while i < l do {
      row[i] <- ' ';
      i <- i + 1;
    }
    row[l] <- '\0';

    row[round2(l)] <- '*';
    writeString(row);
  

    i <- 0;
    while i < l div 2 - 1 do {
    
      rule_90(row);
      writeString(row);

      i <- i + 1;
    }
  } $triangle

  var n: int;

{ $ main
  writeString("Please, give an integer (limit 6): ");
  n <- readInteger();

  if n > 6 then n <- 6;

  triangle(n);
} $ main



